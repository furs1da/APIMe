// <auto-generated />
using System;
using APIMe.Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APIMe.Migrations
{
    [DbContext(typeof(APIMeContext))]
    partial class APIMeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APIMe.Entities.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaim");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUser");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaim");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogin");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name", "LoginProvider", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserToken");
                });

            modelBuilder.Entity("APIMe.Entities.Models.BugFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActualResults")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("actualResults");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Environment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("environment");

                    b.Property<string>("ExpectedResults")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("expectedResults");

                    b.Property<bool>("IsBug")
                        .HasColumnType("bit")
                        .HasColumnName("isBug");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectId");

                    b.Property<int>("SeverityId")
                        .HasColumnType("int")
                        .HasColumnName("severityId");

                    b.Property<string>("StepsToReproduce")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("stepsToReproduce");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("summary");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_BugFeature_projectId");

                    b.ToTable("BugFeature", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.DeviceCode", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceCode1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserCode");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("APIMe.Entities.Models.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("price");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastName");

                    b.HasKey("Id");

                    b.ToTable("Professor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "bbilkhu@conestogac.on.ca",
                            FirstName = "Baljeet",
                            LastName = "Bilkhu"
                        },
                        new
                        {
                            Id = 2,
                            Email = "apimeconestoga@gmail.com",
                            FirstName = "John",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("APIMe.Entities.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("isCompleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_Project_userId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DataTableName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("dataTableName");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("isVisible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("RouteTypeId")
                        .HasColumnType("int")
                        .HasColumnName("routeTypeId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RouteTypeId" }, "IX_Route_routeTypeId");

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.RouteLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("int")
                        .HasColumnName("responseStatus");

                    b.Property<int>("RouteId")
                        .HasColumnType("int")
                        .HasColumnName("routeId");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("timestamp");

                    b.HasIndex(new[] { "RouteId" }, "IX_RouteLog_routeId");

                    b.HasIndex(new[] { "StudentId" }, "IX_RouteLog_studentId");

                    b.ToTable("RouteLog", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.RouteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CrudId")
                        .HasColumnType("int")
                        .HasColumnName("crudId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("ResponseCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("responseCode");

                    b.HasKey("Id");

                    b.ToTable("RouteType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CrudId = 1,
                            Name = "GET - 200 (OK)",
                            ResponseCode = "200"
                        },
                        new
                        {
                            Id = 2,
                            CrudId = 1,
                            Name = "GET - 201 (Created)",
                            ResponseCode = "201"
                        },
                        new
                        {
                            Id = 3,
                            CrudId = 1,
                            Name = "GET - 204 (No Content)",
                            ResponseCode = "204"
                        },
                        new
                        {
                            Id = 4,
                            CrudId = 1,
                            Name = "GET - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 5,
                            CrudId = 1,
                            Name = "GET - 404 (Not Found)",
                            ResponseCode = "404"
                        },
                        new
                        {
                            Id = 6,
                            CrudId = 2,
                            Name = "POST - 200 (OK)",
                            ResponseCode = "200"
                        },
                        new
                        {
                            Id = 7,
                            CrudId = 2,
                            Name = "POST - 201 (Created)",
                            ResponseCode = "201"
                        },
                        new
                        {
                            Id = 8,
                            CrudId = 2,
                            Name = "POST - 204 (No Content)",
                            ResponseCode = "204"
                        },
                        new
                        {
                            Id = 9,
                            CrudId = 2,
                            Name = "POST - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 10,
                            CrudId = 2,
                            Name = "POST - 409 (Conflict)",
                            ResponseCode = "409"
                        },
                        new
                        {
                            Id = 11,
                            CrudId = 3,
                            Name = "PUT - 200 (OK)",
                            ResponseCode = "200"
                        },
                        new
                        {
                            Id = 12,
                            CrudId = 3,
                            Name = "PUT - 204 (No Content)",
                            ResponseCode = "204"
                        },
                        new
                        {
                            Id = 13,
                            CrudId = 3,
                            Name = "PUT - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 14,
                            CrudId = 3,
                            Name = "PUT - 404 (Not Found)",
                            ResponseCode = "404"
                        },
                        new
                        {
                            Id = 15,
                            CrudId = 4,
                            Name = "PATCH - 200 (OK)",
                            ResponseCode = "200"
                        },
                        new
                        {
                            Id = 16,
                            CrudId = 4,
                            Name = "PATCH - 204 (No Content)",
                            ResponseCode = "204"
                        },
                        new
                        {
                            Id = 17,
                            CrudId = 4,
                            Name = "PATCH - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 18,
                            CrudId = 4,
                            Name = "PATCH - 404 (Not Found)",
                            ResponseCode = "404"
                        },
                        new
                        {
                            Id = 19,
                            CrudId = 5,
                            Name = "DELETE - 200 (OK)",
                            ResponseCode = "200"
                        },
                        new
                        {
                            Id = 20,
                            CrudId = 5,
                            Name = "DELETE - 204 (No Content)",
                            ResponseCode = "204"
                        },
                        new
                        {
                            Id = 21,
                            CrudId = 5,
                            Name = "DELETE - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 22,
                            CrudId = 5,
                            Name = "DELETE - 404 (Not Found)",
                            ResponseCode = "404"
                        },
                        new
                        {
                            Id = 23,
                            CrudId = 6,
                            Name = "ERROR - 400 (Bad Request)",
                            ResponseCode = "400"
                        },
                        new
                        {
                            Id = 24,
                            CrudId = 6,
                            Name = "ERROR - 401 (Unauthorized)",
                            ResponseCode = "401"
                        },
                        new
                        {
                            Id = 25,
                            CrudId = 6,
                            Name = "ERROR - 403 (Forbidden)",
                            ResponseCode = "403"
                        },
                        new
                        {
                            Id = 26,
                            CrudId = 6,
                            Name = "ERROR - 404 (Not Found)",
                            ResponseCode = "404"
                        },
                        new
                        {
                            Id = 27,
                            CrudId = 6,
                            Name = "ERROR - 405 (Method Not Allowed)",
                            ResponseCode = "405"
                        },
                        new
                        {
                            Id = 28,
                            CrudId = 6,
                            Name = "ERROR - 409 (Conflict)",
                            ResponseCode = "409"
                        },
                        new
                        {
                            Id = 29,
                            CrudId = 6,
                            Name = "ERROR - 429 (Too Many Requests)",
                            ResponseCode = "429"
                        },
                        new
                        {
                            Id = 30,
                            CrudId = 6,
                            Name = "ERROR - 500 (Internal Server Error)",
                            ResponseCode = "500"
                        },
                        new
                        {
                            Id = 31,
                            CrudId = 6,
                            Name = "ERROR - 502 (Bad Gateway)",
                            ResponseCode = "502"
                        },
                        new
                        {
                            Id = 32,
                            CrudId = 6,
                            Name = "ERROR - 503 (Service Unavailable)",
                            ResponseCode = "503"
                        },
                        new
                        {
                            Id = 33,
                            CrudId = 6,
                            Name = "ERROR - 504 (Gateway Timeout)",
                            ResponseCode = "504"
                        });
                });

            modelBuilder.Entity("APIMe.Entities.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("accessCode");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int")
                        .HasColumnName("professorId");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("sectionName");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProfessorId" }, "IX_Section_professorId");

                    b.ToTable("Section", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessCode = "1234",
                            ProfessorId = 1,
                            SectionName = "SEC-1"
                        },
                        new
                        {
                            Id = 2,
                            AccessCode = "1235",
                            ProfessorId = 1,
                            SectionName = "SEC-2"
                        },
                        new
                        {
                            Id = 3,
                            AccessCode = "1237",
                            ProfessorId = 1,
                            SectionName = "SEC-3"
                        });
                });

            modelBuilder.Entity("APIMe.Entities.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("apiKey");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastName");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("APIMe.Entities.Models.StudentSection", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("studentId");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("sectionId");

                    b.HasKey("StudentId", "SectionId");

                    b.HasIndex(new[] { "SectionId" }, "IX_StudentSection_sectionId");

                    b.HasIndex(new[] { "StudentId" }, "IX_StudentSection_studentId");

                    b.ToTable("StudentSection", (string)null);
                });

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AspNetRoleAspNetUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b6c2c6d9-53e5-4f7b-835a-983124bb2cb6",
                            ConcurrencyStamp = "f8ab86d6-43b9-45a7-a5e5-74884d9cd2cb",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "232eb00c-0f44-4379-b37e-2d712a2b39d6",
                            ConcurrencyStamp = "75757833-84c0-43b9-8e7b-b46a44e38135",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SectionStudent", b =>
                {
                    b.Property<int>("SectionsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("SectionsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("SectionStudent");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUserToken", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIMe.Entities.Models.BugFeature", b =>
                {
                    b.HasOne("APIMe.Entities.Models.Project", "Project")
                        .WithMany("BugFeatures")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_BugFeature_Project");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Project", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Route", b =>
                {
                    b.HasOne("APIMe.Entities.Models.RouteType", "RouteType")
                        .WithMany("Routes")
                        .HasForeignKey("RouteTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Route_RouteType");

                    b.Navigation("RouteType");
                });

            modelBuilder.Entity("APIMe.Entities.Models.RouteLog", b =>
                {
                    b.HasOne("APIMe.Entities.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .IsRequired()
                        .HasConstraintName("FK_RouteLog_Route");

                    b.HasOne("APIMe.Entities.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_RouteLog_Student");

                    b.Navigation("Route");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Section", b =>
                {
                    b.HasOne("APIMe.Entities.Models.Professor", "Professor")
                        .WithMany("Sections")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK_Section_Professor");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("APIMe.Entities.Models.StudentSection", b =>
                {
                    b.HasOne("APIMe.Entities.Models.Section", "Section")
                        .WithMany("StudentSections")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSection_Section");

                    b.HasOne("APIMe.Entities.Models.Student", "Student")
                        .WithMany("StudentSections")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSection_Student");

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AspNetRoleAspNetUser", b =>
                {
                    b.HasOne("APIMe.Entities.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIMe.Entities.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SectionStudent", b =>
                {
                    b.HasOne("APIMe.Entities.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APIMe.Entities.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("APIMe.Entities.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Professor", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Project", b =>
                {
                    b.Navigation("BugFeatures");
                });

            modelBuilder.Entity("APIMe.Entities.Models.RouteType", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Section", b =>
                {
                    b.Navigation("StudentSections");
                });

            modelBuilder.Entity("APIMe.Entities.Models.Student", b =>
                {
                    b.Navigation("StudentSections");
                });
#pragma warning restore 612, 618
        }
    }
}
