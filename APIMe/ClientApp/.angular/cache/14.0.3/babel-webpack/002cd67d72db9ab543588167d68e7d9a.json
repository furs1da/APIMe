{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/nmysh/Desktop/Capstone-Project/APIMe/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\"; // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\nexport class LoginComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n\n      switch (action.path) {\n        case LoginActions.Login:\n          yield _this.login(_this.getReturnUrl());\n          break;\n\n        case LoginActions.LoginCallback:\n          yield _this.processLoginCallback();\n          break;\n\n        case LoginActions.LoginFailed:\n          const message = _this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n\n          _this.message.next(message);\n\n          break;\n\n        case LoginActions.Profile:\n          _this.redirectToProfile();\n\n          break;\n\n        case LoginActions.Register:\n          _this.redirectToRegister();\n\n          break;\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n\n  login(returnUrl) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const result = yield _this2.authorizeService.signIn(state);\n\n      _this2.message.next(undefined);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          yield _this2.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          yield _this2.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n            queryParams: {\n              [QueryParameterNames.Message]: result.message\n            }\n          });\n          break;\n\n        default:\n          throw new Error(`Invalid status result ${result.status}.`);\n      }\n    })();\n  }\n\n  processLoginCallback() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignIn(url);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as completeSignIn never redirects.\n          throw new Error('Should not redirect.');\n\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n\n          break;\n      }\n    })();\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // It's important that we do a replace here so that we remove the callback uri with the\n      // fragment containing the tokens from the browser history.\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl; // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n\n    return state && state.returnUrl || fromQuery || ApplicationPaths.DefaultLoginRedirectPath;\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 18,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\"], [1, \"col-sm-6\"], [1, \"card\"], [1, \"blue-box\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"placeholder\", \"Enter email\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"placeholder\", \"Enter password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-block\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\");\n      i0.ɵɵtext(6, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"form\")(8, \"div\", 5)(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 8);\n      i0.ɵɵtext(14, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 10);\n      i0.ɵɵtext(17, \"Submit\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n  },\n  styles: [\".card[_ngcontent-%COMP%] {\\r\\n    border-radius: 10px;\\r\\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\\r\\n    padding: 20px;\\r\\n    margin: 50px;\\r\\n  }\\r\\n  .form-control[_ngcontent-%COMP%] {\\r\\n    border-radius: 5px;\\r\\n    border: none;\\r\\n    border-bottom: 2px solid #ccc;\\r\\n    box-shadow: none;\\r\\n  }\\r\\n  .form-control[_ngcontent-%COMP%]:focus {\\r\\n    box-shadow: none;\\r\\n    border-color: #0275d8 ;\\r\\n  }\\r\\n  .btn[_ngcontent-%COMP%] {\\r\\n    border-radius: 5px;\\r\\n    background-color: #5cb85c  ;\\r\\n    border: none;\\r\\n    color: white;\\r\\n    margin: 20px;\\r\\n  }\\r\\n  .btn[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #2c3e50;\\r\\n  }\\r\\n  .blue-box[_ngcontent-%COMP%] {\\r\\n    background-color: #0275d8  ;\\r\\n    color: #fff;\\r\\n    padding: 10px;\\r\\n    text-align: center;\\r\\n    border-radius: 5px;\\r\\n    margin-bottom: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7SUFDbkIsdUNBQXVDO0lBQ3ZDLGFBQWE7SUFDYixZQUFZO0VBQ2Q7RUFDQTtJQUNFLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osNkJBQTZCO0lBQzdCLGdCQUFnQjtFQUNsQjtFQUNBO0lBQ0UsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtFQUN4QjtFQUNBO0lBQ0Usa0JBQWtCO0lBQ2xCLDJCQUEyQjtJQUMzQixZQUFZO0lBQ1osWUFBWTtJQUNaLFlBQVk7RUFDZDtFQUNBO0lBQ0UseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSwyQkFBMkI7SUFDM0IsV0FBVztJQUNYLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLG1CQUFtQjtFQUNyQiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBtYXJnaW46IDUwcHg7XHJcbiAgfVxyXG4gIC5mb3JtLWNvbnRyb2wge1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNjY2M7XHJcbiAgICBib3gtc2hhZG93OiBub25lO1xyXG4gIH1cclxuICAuZm9ybS1jb250cm9sOmZvY3VzIHtcclxuICAgIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgICBib3JkZXItY29sb3I6ICMwMjc1ZDggO1xyXG4gIH1cclxuICAuYnRuIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM1Y2I4NWMgIDtcclxuICAgIGJvcmRlcjogbm9uZTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIG1hcmdpbjogMjBweDtcclxuICB9XHJcbiAgLmJ0bjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmMzZTUwO1xyXG4gIH1cclxuICAuYmx1ZS1ib3gge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyNzVkOCAgO1xyXG4gICAgY29sb3I6ICNmZmY7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["AuthenticationResultStatus","BehaviorSubject","LoginActions","QueryParameterNames","ApplicationPaths","ReturnUrlType","LoginComponent","constructor","authorizeService","activatedRoute","router","ngOnInit","action","snapshot","url","path","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","message","queryParamMap","get","Message","next","Profile","redirectToProfile","Register","redirectToRegister","Error","returnUrl","state","result","signIn","undefined","status","Redirect","Success","navigateToReturnUrl","Fail","navigate","LoginFailedPathComponents","queryParams","window","location","href","completeSignIn","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","navigateByUrl","replaceUrl","fromQuery","startsWith","origin","test","DefaultLoginRedirectPath","apiAuthorizationPath","redirectUrl","replace","i0","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\nmysh\\Desktop\\Capstone-Project\\APIMe\\ClientApp\\src\\api-authorization\\login\\login.component.ts","C:\\Users\\nmysh\\Desktop\\Capstone-Project\\APIMe\\ClientApp\\src\\api-authorization\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AuthorizeService, AuthenticationResultStatus } from '../authorize.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\r\n\r\n// The main responsibility of this component is to handle the user's login process.\r\n// This is the starting point for the login process. Any component that needs to authenticate\r\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\r\n// let the component perform the login and return back to the return url.\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public message = new BehaviorSubject<string | null | undefined>(null);\r\n\r\n  constructor(\r\n    private authorizeService: AuthorizeService,\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  async ngOnInit() {\r\n    const action = this.activatedRoute.snapshot.url[1];\r\n    switch (action.path) {\r\n      case LoginActions.Login:\r\n        await this.login(this.getReturnUrl());\r\n        break;\r\n      case LoginActions.LoginCallback:\r\n        await this.processLoginCallback();\r\n        break;\r\n      case LoginActions.LoginFailed:\r\n        const message = this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\r\n        this.message.next(message);\r\n        break;\r\n      case LoginActions.Profile:\r\n        this.redirectToProfile();\r\n        break;\r\n      case LoginActions.Register:\r\n        this.redirectToRegister();\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid action '${action}'`);\r\n    }\r\n  }\r\n\r\n\r\n  private async login(returnUrl: string): Promise<void> {\r\n    const state: INavigationState = { returnUrl };\r\n    const result = await this.authorizeService.signIn(state);\r\n    this.message.next(undefined);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        break;\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(returnUrl);\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        await this.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\r\n          queryParams: { [QueryParameterNames.Message]: result.message }\r\n        });\r\n        break;\r\n      default:\r\n        throw new Error(`Invalid status result ${(result as any).status}.`);\r\n    }\r\n  }\r\n\r\n  private async processLoginCallback(): Promise<void> {\r\n    const url = window.location.href;\r\n    const result = await this.authorizeService.completeSignIn(url);\r\n    switch (result.status) {\r\n      case AuthenticationResultStatus.Redirect:\r\n        // There should not be any redirects as completeSignIn never redirects.\r\n        throw new Error('Should not redirect.');\r\n      case AuthenticationResultStatus.Success:\r\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\r\n        break;\r\n      case AuthenticationResultStatus.Fail:\r\n        this.message.next(result.message);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private redirectToRegister(): any {\r\n    this.redirectToApiAuthorizationPath(\r\n      `${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\r\n  }\r\n\r\n  private redirectToProfile(): void {\r\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\r\n  }\r\n\r\n  private async navigateToReturnUrl(returnUrl: string) {\r\n    // It's important that we do a replace here so that we remove the callback uri with the\r\n    // fragment containing the tokens from the browser history.\r\n    await this.router.navigateByUrl(returnUrl, {\r\n      replaceUrl: true\r\n    });\r\n  }\r\n\r\n  private getReturnUrl(state?: INavigationState): string {\r\n    const fromQuery = (this.activatedRoute.snapshot.queryParams as INavigationState).returnUrl;\r\n    // If the url is coming from the query string, check that is either\r\n    // a relative url or an absolute url\r\n    if (fromQuery &&\r\n      !(fromQuery.startsWith(`${window.location.origin}/`) ||\r\n        /\\/[^\\/].*/.test(fromQuery))) {\r\n      // This is an extra check to prevent open redirects.\r\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\r\n    }\r\n    return (state && state.returnUrl) ||\r\n      fromQuery ||\r\n      ApplicationPaths.DefaultLoginRedirectPath;\r\n  }\r\n\r\n  private redirectToApiAuthorizationPath(apiAuthorizationPath: string) {\r\n    // It's important that we do a replace here so that when the user hits the back arrow on the\r\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\r\n    // component.\r\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\r\n    window.location.replace(redirectUrl);\r\n  }\r\n}\r\n\r\ninterface INavigationState {\r\n  [ReturnUrlType]: string;\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-sm-6\">\r\n        <div class=\"card\">\r\n          <div class=\"blue-box\">\r\n            <h2>Login</h2>\r\n          </div>\r\n          <form>\r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Email:</label>\r\n              <input type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter email\">\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"password\">Password:</label>\r\n              <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Enter password\">\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-block\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- jQuery -->\r\n  <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"></script>\r\n  <!-- Bootstrap JS -->\r\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n"]},"metadata":{},"sourceType":"module"}